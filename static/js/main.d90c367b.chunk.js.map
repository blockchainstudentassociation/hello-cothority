{"version":3,"sources":["serviceWorker.js","views/conode/ConodeList.js","views/conode/index.js","views/personhood/UpcomingParties.js","views/personhood/index.js","views/skipchain/BlockList.js","views/skipchain/index.js","App.js","index.js"],"names":["global","__webpack_require__","d","__webpack_exports__","unregister","fetch","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","ConodeList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","serverDescription","servers","res","text","file","toml","parse","socket","net","RosterSocket","identity","Roster","fromTOML","send","status","serveridentity","description","setState","react_default","a","createElement","Fragment","className","map","server","key","Public","Description","Address","Component","conode","_ref","Switch","Route","path","component","UpcomingParties","personhood","BlockList","skipchain","App","BrowserRouter","Conode","Skipchain","Personhood","render","Redirect","to","Link","role","aria-label","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d90c367b.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst fetch = global.fetch\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, { Component } from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport toml from 'toml'\nimport identity, { net } from '@dedis/cothority'\n\nclass ConodeList extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      serverDescription: '',\n      servers: []\n    }\n  }\n\n  async componentDidMount () {\n    const res = await fetch('https://raw.githubusercontent.com/dedis/cothority/master/dedis-cothority.toml')\n    const file = await res.text()\n    const servers = toml.parse(file).servers\n    const socket = new net.RosterSocket(identity.Roster.fromTOML(file), 'Status')\n    const status = await socket.send('status.Request', 'Response', {})\n    const serverDescription = await status.serveridentity.description\n    this.setState({ servers, serverDescription })\n  }\n\n  render () {\n    return (\n      <>\n        <h2 className='title is-3'>List of official <span className='has-text-link'>conodes</span>:</h2>\n        <table className='table is-fullwidth is-hoverable'>\n          <tbody>\n            {this.state.servers.map(server => (\n              <tr key={server.Public}><td>{server.Description}</td><td>{server.Address}</td></tr>\n            ))}\n          </tbody>\n        </table>\n        <br />\n        {this.state.serverDescription\n          ? <h2 className='title is-3'>Connected to <span className='has-text-link'>{this.state.serverDescription}</span></h2>\n          : <h2 className='title is-3'>Connecting to a <span className='has-text-link'>conode</span>...</h2>\n        }\n      </>\n    )\n  }\n}\n\nexport default ConodeList\n","import React from 'react'\nimport {\n  Route,\n  Switch\n} from 'react-router-dom'\nimport ConodeList from './ConodeList'\n\nexport default ({ match }) => (\n  <Switch>\n    <Route path={match.path} component={ConodeList} />\n  </Switch>\n)\n","import React from 'react'\nexport default () => <h2 className='title is-3'>Upcoming Parties</h2>\n","import React from 'react'\nimport {\n  Route,\n  Switch\n} from 'react-router-dom'\nimport UpcomingParties from './UpcomingParties'\n\nexport default ({ match }) => (\n  <Switch>\n    <Route path={match.path} component={UpcomingParties} />\n  </Switch>\n)\n","import React from 'react'\nexport default () => <h2 className='title is-3'>Block List</h2>\n","import React from 'react'\nimport {\n  Route,\n  Switch\n} from 'react-router-dom'\nimport BlockList from './BlockList'\n\nexport default ({ match }) => (\n  <Switch>\n    <Route path={match.path} component={BlockList} />\n  </Switch>\n)\n","import React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n  Redirect\n} from 'react-router-dom'\nimport Conode from './views/conode'\nimport Personhood from './views/personhood'\nimport Skipchain from './views/skipchain'\nimport 'blulma/blulma.css'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <Router>\n        <div className='container'>\n          <section className='section'>\n            <h1 className='title is-1'>Hello, <span className='has-text-link'>Cothority</span></h1>\n            <Switch>\n              <Route path='/conode' component={Conode} />\n              <Route path='/skipchain' component={Skipchain} />\n              <Route path='/personhood' component={Personhood} />\n              <Route render={() => (\n                <Redirect to='/conode' />\n              )} />\n            </Switch>\n            <div className='is-bottom-nav'>\n              <Link to='/conode' className='is-bottom-nav-item'>\n                <span className='title is-3' role='img' aria-label='computer'>\n                  💻\n                </span>\n                <br />\n                conode\n              </Link>\n              <Link to='/skipchain' className='is-bottom-nav-item'>\n                <span className='title is-3' role='img' aria-label='link'>\n                  🔗\n                </span>\n                <br />\n                skipchain\n              </Link>\n              <Link to='/personhood' className='is-bottom-nav-item'>\n                <span className='title is-3' role='img' aria-label='person'>\n                  🤓\n                </span>\n                <br />\n                personhood\n              </Link>\n            </div>\n          </section>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}